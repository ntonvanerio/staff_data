# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dhu4UZA14JrOJTQ3YVmm-WBNYiYrASeB
"""

# Streamlit dashboard para GoFundMe - Nicol√°s Ton
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

# Simulaci√≥n de datos
np.random.seed(42)
categories = ['Salud', 'Educaci√≥n', 'Desastres Naturales', 'Animales', 'Comunidad']
countries = ['Argentina', 'USA', 'Brasil', 'M√©xico', 'Espa√±a']

n_campaigns = 300
campaigns = pd.DataFrame({
    'id': range(1, n_campaigns + 1),
    'nombre': [f'Campa√±a {i}' for i in range(1, n_campaigns + 1)],
    'categor√≠a': np.random.choice(categories, n_campaigns),
    'pa√≠s': np.random.choice(countries, n_campaigns),
    'meta_usd': np.random.randint(5000, 50000, n_campaigns),
    'recaudado_usd': lambda df: df['meta_usd'] * np.random.uniform(0.2, 1.3, n_campaigns),
    'fecha_creaci√≥n': pd.to_datetime('2024-01-01') + pd.to_timedelta(np.random.randint(0, 180, n_campaigns), unit='D')
})
campaigns['recaudado_usd'] = campaigns['meta_usd'] * np.random.uniform(0.2, 1.3, n_campaigns)
campaigns['estado'] = np.where(campaigns['recaudado_usd'] >= campaigns['meta_usd'], 'Meta alcanzada', 'En curso')

# Sidebar
st.sidebar.title("Filtros")
pais = st.sidebar.selectbox("Pa√≠s", ['Todos'] + countries)
categoria = st.sidebar.selectbox("Categor√≠a", ['Todas'] + categories)

# Filtros
df = campaigns.copy()
if pais != 'Todos':
    df = df[df['pa√≠s'] == pais]
if categoria != 'Todas':
    df = df[df['categor√≠a'] == categoria]

# KPIs
total_recaudado = df['recaudado_usd'].sum()
total_meta = df['meta_usd'].sum()
porcentaje_exito = (df['estado'] == 'Meta alcanzada').mean() * 100
ticket_promedio = df['recaudado_usd'].mean()

st.title("üìä Dashboard de Campa√±as - GoFundMe (simulado)")

col1, col2, col3, col4 = st.columns(4)
col1.metric("Recaudaci√≥n total", f"${total_recaudado:,.0f}")
col2.metric("Meta total", f"${total_meta:,.0f}")
col3.metric("√âxito (%)", f"{porcentaje_exito:.1f}%")
col4.metric("Recaudaci√≥n promedio", f"${ticket_promedio:,.0f}")

# Gr√°fico: Recaudaci√≥n por categor√≠a
st.subheader("üìÅ Recaudaci√≥n por categor√≠a")
cat_chart = df.groupby('categor√≠a')['recaudado_usd'].sum().reset_index()
st.plotly_chart(px.bar(cat_chart, x='categor√≠a', y='recaudado_usd', title='Recaudaci√≥n total por categor√≠a'))

# Gr√°fico: Mapa por pa√≠s
st.subheader("üåç Distribuci√≥n geogr√°fica")
geo = df.groupby('pa√≠s')['recaudado_usd'].sum().reset_index()
geo['iso'] = geo['pa√≠s'].map({
    'Argentina': 'ARG',
    'USA': 'USA',
    'Brasil': 'BRA',
    'M√©xico': 'MEX',
    'Espa√±a': 'ESP'
})
st.plotly_chart(px.choropleth(geo, locations='iso', color='recaudado_usd',
                              hover_name='pa√≠s', title='Recaudaci√≥n total por pa√≠s',
                              color_continuous_scale='blues'))

# Tabla de campa√±as destacadas
st.subheader("‚≠ê Campa√±as con mayor recaudaci√≥n")
top_campa√±as = df.sort_values('recaudado_usd', ascending=False).head(10)
st.dataframe(top_campa√±as[['nombre', 'categor√≠a', 'pa√≠s', 'meta_usd', 'recaudado_usd', 'estado']])

# Alertas
st.subheader("üö® Campa√±as cerca de la meta")
casi_meta = df[(df['recaudado_usd'] / df['meta_usd']) >= 0.9 & (df['estado'] != 'Meta alcanzada')]
st.dataframe(casi_meta[['nombre', 'pa√≠s', 'categor√≠a', 'recaudado_usd', 'meta_usd']])