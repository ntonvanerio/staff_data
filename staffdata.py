# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dhu4UZA14JrOJTQ3YVmm-WBNYiYrASeB
"""

# GoFundMe Campaign Dashboard - Nicolás Ton (Versión Final)
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from datetime import datetime

# Configuración de la app
st.set_page_config(page_title="GoFundMe Dashboard", layout="wide")

# Estilo visual - Fondo gris oscuro y branding GoFundMe
st.markdown("""
    <style>
    html, body, .main {
        background-color: #e0e2e6;
    }
    h1, h2, h3 {
        color: #10754c;
    }
    .stSelectbox div[role="listbox"], .stMultiSelect div[role="listbox"] {
        background-color: white !important;
        color: black !important;
    }
    .stSlider {
        padding-top: 10px;
    }
    </style>
""", unsafe_allow_html=True)

# 📅 Fechas: desde enero 2025 hasta hoy (24 julio 2025)
today = datetime(2025, 7, 24)
start_date = datetime(2025, 1, 1)
date_range_days = (today - start_date).days

# Simulación de datos
np.random.seed(42)
categories = ['Health', 'Education', 'Natural Disasters', 'Animals', 'Community']
countries = ['Argentina', 'USA', 'Brazil', 'Mexico', 'Spain']
n_campaigns = 300

campaigns = pd.DataFrame({
    'id': range(1, n_campaigns + 1),
    'name': [f'Campaign {i}' for i in range(1, n_campaigns + 1)],
    'category': np.random.choice(categories, n_campaigns),
    'country': np.random.choice(countries, n_campaigns),
    'goal_usd': np.random.randint(5000, 50000, n_campaigns),
    'created_at': start_date + pd.to_timedelta(np.random.randint(0, date_range_days, n_campaigns), unit='D')
})
campaigns['raised_usd'] = campaigns['goal_usd'] * np.random.uniform(0.2, 1.3, n_campaigns)
campaigns['status'] = np.where(campaigns['raised_usd'] >= campaigns['goal_usd'], 'Goal Reached', 'In Progress')

# 🎛️ Filtros
min_date = campaigns['created_at'].min().date()
max_date = campaigns['created_at'].max().date()

st.sidebar.title("🔎 Filters")
selected_country = st.sidebar.multiselect("Country", options=countries, default=countries)
selected_category = st.sidebar.multiselect("Category", options=categories, default=categories)
selected_date_range = st.sidebar.slider(
    "Creation Date Range",
    min_value=min_date,
    max_value=max_date,
    value=(min_date, max_date),
    format="YYYY-MM-DD"
)

# 📋 Filtrado de datos
df = campaigns[
    (campaigns['country'].isin(selected_country)) &
    (campaigns['category'].isin(selected_category)) &
    (campaigns['created_at'] >= pd.to_datetime(selected_date_range[0])) &
    (campaigns['created_at'] <= pd.to_datetime(selected_date_range[1]))
]

# 🧾 Header y descripción
st.title("📊 GoFundMe Campaign Performance Dashboard")
st.markdown("""
Welcome to the GoFundMe Campaign Insights Dashboard.  
Explore fundraising performance from January 2025 through July 2025 across different countries and categories.  
Use filters on the left to drill into specific segments and download insights.
""")

# Exportación CSV
st.download_button("⬇️ Download Filtered Data as CSV", df.to_csv(index=False), "filtered_campaigns.csv", "text/csv")

# 📊 KPIs
total_raised = df['raised_usd'].sum()
total_goal = df['goal_usd'].sum()
success_rate = (df['status'] == 'Goal Reached').mean() * 100
avg_donation = df['raised_usd'].mean()

col1, col2, col3, col4 = st.columns(4)
col1.metric("Total Raised", f"${total_raised:,.0f}")
col2.metric("Total Goal", f"${total_goal:,.0f}")
col3.metric("Success Rate", f"{success_rate:.1f}%")
col4.metric("Avg Raised per Campaign", f"${avg_donation:,.0f}")
st.caption(f"ℹ️ {success_rate:.1f}% of filtered campaigns reached their fundraising goal.")

# 📁 Raised by Category
st.markdown("### 📁 Raised Amount by Category")
cat_chart = df.groupby('category')['raised_usd'].sum().reset_index()
st.plotly_chart(px.bar(cat_chart, x='category', y='raised_usd',
                       color='category',
                       color_discrete_sequence=px.colors.sequential.Emrld,
                       title="Total Raised by Category"), use_container_width=True)

# 🌍 Raised by Country
st.markdown("### 🌍 Raised Amount by Country")
geo = df.groupby('country')['raised_usd'].sum().reset_index()
geo['iso'] = geo['country'].map({
    'Argentina': 'ARG',
    'USA': 'USA',
    'Brazil': 'BRA',
    'Mexico': 'MEX',
    'Spain': 'ESP'
})
st.plotly_chart(px.choropleth(geo, locations='iso', color='raised_usd',
                              hover_name='country',
                              color_continuous_scale='greens',
                              title='Total Raised by Country'), use_container_width=True)

# 📅 Timeline
st.markdown("### 📅 Campaigns Created Over Time")
df['month'] = df['created_at'].dt.to_period('M').dt.to_timestamp()
timeline = df.groupby('month')['raised_usd'].sum().reset_index()
st.plotly_chart(px.line(timeline, x='month', y='raised_usd',
                        markers=True,
                        title="Monthly Raised Amount"), use_container_width=True)

# 🧪 Success Comparison
st.markdown("### 🧪 Success vs In Progress Comparison")
success_cmp = df.groupby('status')['raised_usd'].agg(['count', 'mean', 'sum']).reset_index()
st.dataframe(success_cmp)

# 🏆 Success Rate by Category
st.markdown("### 🏆 Success Rate by Category")
success_by_cat = df.groupby('category').apply(
    lambda x: (x['status'] == 'Goal Reached').mean() * 100).reset_index(name='success_rate')
st.plotly_chart(px.bar(success_by_cat, x='category', y='success_rate',
                       color='category',
                       color_discrete_sequence=px.colors.sequential.Emrld,
                       title='Success Rate by Category'), use_container_width=True)

# ⭐ Top Performing Campaigns
st.markdown("### ⭐ Top Performing Campaigns")
top = df.sort_values('raised_usd', ascending=False).head(10)
st.dataframe(top[['name', 'category', 'country', 'goal_usd', 'raised_usd', 'status']])

# 🚨 Near Goal
st.markdown("### 🚨 Campaigns Close to Goal (90%+ and not yet reached)")
near_goal = df[((df['raised_usd'] / df['goal_usd']) >= 0.9) & (df['status'] != 'Goal Reached')]
st.dataframe(near_goal[['name', 'country', 'category', 'raised_usd', 'goal_usd']])

# 💤 Inactive Campaigns
st.markdown("### 💤 Potentially Inactive Campaigns (created before April 2025)")
inactive = df[df['created_at'] < pd.to_datetime("2025-04-01")]
st.dataframe(inactive[['name', 'country', 'created_at', 'raised_usd', 'goal_usd']])



