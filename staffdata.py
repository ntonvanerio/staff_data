# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dhu4UZA14JrOJTQ3YVmm-WBNYiYrASeB
"""
#
# GoFundMe Campaign Dashboard - Nicolás Ton (Versión Final)
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from datetime import datetime

# Page setup
st.set_page_config(page_title="GoFundMe Dashboard", layout="wide")

# Custom CSS: full grey background and card styling
st.markdown("""
    <style>
    html, body, .main, .block-container {
        background-color: #e0e2e6 !important;
    }
    h1, h2, h3 {
        color: #10754c;
        text-align: center;
    }
    .stSelectbox div[role="listbox"], .stMultiSelect div[role="listbox"] {
        background-color: white !important;
        color: black !important;
    }
    .stSlider {
        padding-top: 10px;
    }
    .card {
        background-color: #ffffffcc;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin-bottom: 1.5rem;
    }
    </style>
""", unsafe_allow_html=True)

# Simulate campaign data
today = datetime(2025, 7, 24)
start_date = datetime(2025, 1, 1)
days_range = (today - start_date).days

np.random.seed(42)
categories = ['Health', 'Education', 'Natural Disasters', 'Animals', 'Community']
countries = ['Argentina', 'USA', 'Brazil', 'Mexico', 'Spain']
n_campaigns = 300

campaigns = pd.DataFrame({
    'id': range(1, n_campaigns + 1),
    'name': [f'Campaign {i}' for i in range(1, n_campaigns + 1)],
    'category': np.random.choice(categories, n_campaigns),
    'country': np.random.choice(countries, n_campaigns),
    'goal_usd': np.random.randint(5000, 50000, n_campaigns),
    'created_at': start_date + pd.to_timedelta(np.random.randint(0, days_range, n_campaigns), unit='D')
})
campaigns['raised_usd'] = campaigns['goal_usd'] * np.random.uniform(0.2, 1.3, n_campaigns)
campaigns['status'] = np.where(campaigns['raised_usd'] >= campaigns['goal_usd'], 'Goal Reached', 'In Progress')

# Filters
min_date = campaigns['created_at'].min().date()
max_date = campaigns['created_at'].max().date()

st.sidebar.title("Filters")
selected_country = st.sidebar.multiselect("Country", options=countries, default=countries)
selected_category = st.sidebar.multiselect("Category", options=categories, default=categories)
selected_date_range = st.sidebar.slider("Creation Date Range",
    min_value=min_date, max_value=max_date,
    value=(min_date, max_date), format="YYYY-MM-DD")

df = campaigns[
    (campaigns['country'].isin(selected_country)) &
    (campaigns['category'].isin(selected_category)) &
    (campaigns['created_at'] >= pd.to_datetime(selected_date_range[0])) &
    (campaigns['created_at'] <= pd.to_datetime(selected_date_range[1]))
]

# Header
st.markdown("""
<div class="card">
<h1>GoFundMe Campaign Performance Dashboard</h1>
<p style="text-align: center">Explore performance from Jan to Jul 2025. Use filters on the left.</p>
</div>
""", unsafe_allow_html=True)

# CSV Export
st.download_button("Download Filtered Data", df.to_csv(index=False), "filtered_campaigns.csv", "text/csv")


