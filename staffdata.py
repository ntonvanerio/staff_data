# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dhu4UZA14JrOJTQ3YVmm-WBNYiYrASeB
"""
#
# GoFundMe Campaign Dashboard - Nicolás Ton (Versión Final)
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from datetime import datetime

# Page setup
st.set_page_config(page_title="GoFundMe Dashboard", layout="wide")

# Custom CSS
st.markdown("""
    <style>
    html, body, .main, .block-container {
        background-color: #e0e2e6 !important;
    }
    h1, h2, h3 {
        color: #10754c;
        text-align: center;
    }
    .stSelectbox div[role="listbox"], .stMultiSelect div[role="listbox"] {
        background-color: white !important;
        color: black !important;
    }
    .stSlider {
        padding-top: 10px;
    }
    .highlight-box {
        background-color: #f2f2f2;
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 20px;
        box-shadow: 0px 0px 10px rgba(0,0,0,0.05);
    }
    </style>
""", unsafe_allow_html=True)

# Simulate campaign data
today = datetime(2025, 7, 24)
start_date = datetime(2025, 1, 1)
days_range = (today - start_date).days

np.random.seed(42)
categories = ['Health', 'Education', 'Natural Disasters', 'Animals', 'Community']
countries = ['Argentina', 'USA', 'Brazil', 'Mexico', 'Spain']
n_campaigns = 300

campaigns = pd.DataFrame({
    'id': range(1, n_campaigns + 1),
    'name': [f'Campaign {i}' for i in range(1, n_campaigns + 1)],
    'category': np.random.choice(categories, n_campaigns),
    'country': np.random.choice(countries, n_campaigns),
    'goal_usd': np.random.randint(5000, 50000, n_campaigns),
    'created_at': start_date + pd.to_timedelta(np.random.randint(0, days_range, n_campaigns), unit='D')
})
campaigns['raised_usd'] = campaigns['goal_usd'] * np.random.uniform(0.2, 1.3, n_campaigns)
campaigns['status'] = np.where(campaigns['raised_usd'] >= campaigns['goal_usd'], 'Goal Reached', 'In Progress')

# Filters
min_date = campaigns['created_at'].min().date()
max_date = campaigns['created_at'].max().date()

st.sidebar.title("Filters")
selected_country = st.sidebar.multiselect("Country", options=countries, default=countries)
selected_category = st.sidebar.multiselect("Category", options=categories, default=categories)
selected_date_range = st.sidebar.slider("Creation Date Range",
    min_value=min_date, max_value=max_date,
    value=(min_date, max_date), format="YYYY-MM-DD")

df = campaigns[
    (campaigns['country'].isin(selected_country)) &
    (campaigns['category'].isin(selected_category)) &
    (campaigns['created_at'] >= pd.to_datetime(selected_date_range[0])) &
    (campaigns['created_at'] <= pd.to_datetime(selected_date_range[1]))
]

# Header
st.title("GoFundMe Campaign Performance Dashboard")
st.markdown("""
<div class='highlight-box'>
Explore performance from Jan to Jul 2025. Use filters on the left.
</div>
""", unsafe_allow_html=True)

# CSV Export
st.download_button("Download Filtered Data", df.to_csv(index=False), "filtered_campaigns.csv", "text/csv")

# KPIs
total_raised = df['raised_usd'].sum()
total_goal = df['goal_usd'].sum()
success_rate = (df['status'] == 'Goal Reached').mean() * 100
avg_donation = df['raised_usd'].mean()

st.markdown("""
<div class='highlight-box'>
""", unsafe_allow_html=True)
k1, k2, k3, k4, k5 = st.columns(5)
k1.metric("Total Raised", f"${total_raised:,.0f}")
k2.metric("Total Goal", f"${total_goal:,.0f}")
k3.metric("Success Rate", f"{success_rate:.1f}%")
k4.metric("Avg Raised per Campaign", f"${avg_donation:,.0f}")
k5.metric("Campaigns Reached Goal", f"{(df['status'] == 'Goal Reached').sum()} / {len(df)}")
st.markdown("""
</div>
""", unsafe_allow_html=True)


# Donor simulation
donors = pd.DataFrame({
    'donor_id': range(1, len(df)//2 + 1),
    'donations': np.random.poisson(2, len(df)//2),
    'channel': np.random.choice(['Email', 'Social', 'Referral', 'Direct'], len(df)//2),
    'total_donated': np.random.uniform(10, 500, len(df)//2)
})
num_donors = len(donors)
new_donors = (donors['donations'] == 1).sum()
retention = (donors['donations'] > 1).mean() * 100
avg_donor_val = donors['total_donated'].mean()

st.markdown("""
<div class='highlight-box'>
""", unsafe_allow_html=True)
d1, d2, d3, d4 = st.columns(4)
d1.metric("Donors", f"{num_donors}")
d2.metric("New Donors (%)", f"{new_donors/num_donors*100:.1f}%")
d3.metric("Retention Rate", f"{retention:.1f}%")
d4.metric("Avg Donor Value", f"${avg_donor_val:.0f}")
st.markdown("""
</div>
""", unsafe_allow_html=True)

# 2-column layout for charts
c1, c2 = st.columns(2)
cat_chart = df.groupby('category')['raised_usd'].sum().reset_index()
c1.plotly_chart(px.bar(cat_chart, x='category', y='raised_usd',
    title="Raised by Category", color='category',
    color_discrete_sequence=px.colors.sequential.Emrld, template='plotly_white'), use_container_width=True)
channel_sum = donors.groupby('channel')['total_donated'].sum().reset_index()
c2.plotly_chart(px.pie(channel_sum, names='channel', values='total_donated',
    title='Donations by Channel', template='plotly_white'), use_container_width=True)

# Timeline & Country map
t1, t2 = st.columns(2)
df['month'] = df['created_at'].dt.to_period('M').dt.to_timestamp()
timeline = df.groupby('month')['raised_usd'].sum().reset_index()
t1.plotly_chart(px.line(timeline, x='month', y='raised_usd',
    markers=True, title="Monthly Raised Amount", template='plotly_white'), use_container_width=True)
geo = df.groupby('country')['raised_usd'].sum().reset_index()
geo['iso'] = geo['country'].map({'Argentina': 'ARG', 'USA': 'USA', 'Brazil': 'BRA', 'Mexico': 'MEX', 'Spain': 'ESP'})
t2.plotly_chart(px.choropleth(geo, locations='iso', color='raised_usd',
    hover_name='country', title='Raised by Country',
    color_continuous_scale='greens', template='plotly_white'), use_container_width=True)

# Top campaigns
top = df.sort_values('raised_usd', ascending=False).head(10)
st.markdown("Top Performing Campaigns")
c3, c4 = st.columns(2)
c3.dataframe(top[['name', 'category', 'country', 'goal_usd', 'raised_usd', 'status']])
c4.plotly_chart(px.bar(top, x='name', y='raised_usd', color='category',
    title='Top Campaigns by Raised USD', template='plotly_white'), use_container_width=True)

# Salary data simulation
st.markdown("Employee Salary Overview")
roles = ['Analyst', 'Engineer', 'Manager', 'Director']
sectors = ['Product', 'Data', 'Marketing', 'Operations']
genders = ['Male', 'Female', 'Non-binary']
ages = np.random.randint(22, 60, 200)
salary_data = pd.DataFrame({
    'role': np.random.choice(roles, 200),
    'sector': np.random.choice(sectors, 200),
    'country': np.random.choice(countries, 200),
    'gender': np.random.choice(genders, 200),
    'age': ages,
    'salary_usd': np.random.normal(50000, 15000, 200).round(0)
})
s1, s2 = st.columns(2)
s1.plotly_chart(px.box(salary_data, x='role', y='salary_usd', title="Salary by Role", template='plotly_white'), use_container_width=True)
s2.plotly_chart(px.box(salary_data, x='country', y='salary_usd', title="Salary by Country", template='plotly_white'), use_container_width=True)
s3, s4 = st.columns(2)
s3.plotly_chart(px.box(salary_data, x='sector', y='salary_usd', title="Salary by Sector", template='plotly_white'), use_container_width=True)
s4.plotly_chart(px.box(salary_data, x='gender', y='salary_usd', title="Salary by Gender", template='plotly_white'), use_container_width=True)



