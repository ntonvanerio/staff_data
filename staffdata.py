# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Dhu4UZA14JrOJTQ3YVmm-WBNYiYrASeB
"""

# GoFundMe Campaign Performance Dashboard - Nicol√°s Ton
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

# Streamlit config
st.set_page_config(page_title="GoFundMe Campaign Dashboard", layout="wide")

# Custom CSS for GoFundMe branding and better visuals
st.markdown("""
    <style>
    html, body, .main {
        background-color: #f1f3f5;
    }
    h1, h2, h3 {
        color: #10754c;
    }
    .stSelectbox div[role="listbox"], .stMultiSelect div[role="listbox"] {
        background-color: white !important;
        color: black !important;
    }
    .stSlider {
        padding-top: 10px;
    }
    </style>
""", unsafe_allow_html=True)

# Simulated dataset
np.random.seed(42)
categories = ['Health', 'Education', 'Natural Disasters', 'Animals', 'Community']
countries = ['Argentina', 'USA', 'Brazil', 'Mexico', 'Spain']

n_campaigns = 300
campaigns = pd.DataFrame({
    'id': range(1, n_campaigns + 1),
    'name': [f'Campaign {i}' for i in range(1, n_campaigns + 1)],
    'category': np.random.choice(categories, n_campaigns),
    'country': np.random.choice(countries, n_campaigns),
    'goal_usd': np.random.randint(5000, 50000, n_campaigns),
    'created_at': pd.to_datetime('2024-01-01') + pd.to_timedelta(np.random.randint(0, 180, n_campaigns), unit='D')
})
campaigns['raised_usd'] = campaigns['goal_usd'] * np.random.uniform(0.2, 1.3, n_campaigns)
campaigns['status'] = np.where(campaigns['raised_usd'] >= campaigns['goal_usd'], 'Goal Reached', 'In Progress')

# Convert min/max dates for slider compatibility
min_date = campaigns['created_at'].min().date()
max_date = campaigns['created_at'].max().date()

# Sidebar filters
st.sidebar.title("üîé Filters")
selected_country = st.sidebar.multiselect("Country", options=countries, default=countries)
selected_category = st.sidebar.multiselect("Category", options=categories, default=categories)
selected_date_range = st.sidebar.slider(
    "Creation Date Range",
    min_value=min_date,
    max_value=max_date,
    value=(min_date, max_date),
    format="YYYY-MM-DD"
)

# Filter dataset
df = campaigns[
    (campaigns['country'].isin(selected_country)) &
    (campaigns['category'].isin(selected_category)) &
    (campaigns['created_at'] >= pd.to_datetime(selected_date_range[0])) &
    (campaigns['created_at'] <= pd.to_datetime(selected_date_range[1]))
]

# KPIs
total_raised = df['raised_usd'].sum()
total_goal = df['goal_usd'].sum()
success_rate = (df['status'] == 'Goal Reached').mean() * 100
avg_donation = df['raised_usd'].mean()

# Header
st.title("üìä GoFundMe Campaign Performance Dashboard")

# KPI cards
col1, col2, col3, col4 = st.columns(4)
col1.metric("Total Raised", f"${total_raised:,.0f}")
col2.metric("Total Goal", f"${total_goal:,.0f}")
col3.metric("Success Rate", f"{success_rate:.1f}%")
col4.metric("Avg Raised per Campaign", f"${avg_donation:,.0f}")

# Raised by category
st.markdown("### üìÅ Raised Amount by Category")
cat_chart = df.groupby('category')['raised_usd'].sum().reset_index()
st.plotly_chart(px.bar(cat_chart, x='category', y='raised_usd',
                       color='category',
                       color_discrete_sequence=px.colors.sequential.Emrld,
                       title="Total Raised by Category"), use_container_width=True)

# Raised by country (map)
st.markdown("### üåç Raised Amount by Country")
geo = df.groupby('country')['raised_usd'].sum().reset_index()
geo['iso'] = geo['country'].map({
    'Argentina': 'ARG',
    'USA': 'USA',
    'Brazil': 'BRA',
    'Mexico': 'MEX',
    'Spain': 'ESP'
})
st.plotly_chart(px.choropleth(geo, locations='iso', color='raised_usd',
                              hover_name='country',
                              color_continuous_scale='greens',
                              title='Total Raised by Country'), use_container_width=True)

# Top 10 campaigns
st.markdown("### ‚≠ê Top Performing Campaigns")
top_campaigns = df.sort_values('raised_usd', ascending=False).head(10)
st.dataframe(top_campaigns[['name', 'category', 'country', 'goal_usd', 'raised_usd', 'status']])

# Near goal campaigns
st.markdown("### üö® Campaigns Close to Goal (90%+ and not yet reached)")
near_goal = df[((df['raised_usd'] / df['goal_usd']) >= 0.9) & (df['status'] != 'Goal Reached')]
st.dataframe(near_goal[['name', 'country', 'category', 'raised_usd', 'goal_usd']])


